
	원시 프로그램 : 사람이 작성한 소스(src 폴더의 .java 파일들을 의미한다.)
	→ int a = 30; 사람이 알아볼 수 있는 형태, 컴퓨터가 인식하기 위해서는 기계어(이진수)로 번역(컴파일)이 필요하다.
	→ 목적 프로그램 : 기계가 이해할 수 있는 언어로 번역된 소스(bin 폴더의 .class 파일들을 의미한다.)
					  프로그램 구동이 목적인 프로그램이다.
	* 자바는 컴파일 언어이다.
	* javascript 는 컴파일 언어가 아니다.
	* Ctrl + F11 → 컴파일 후 실행
	* 언어의 종류 : 컴파일 vs 인터프리터
	* 컴파일 언어 : 프로그램 실행하기위해 목적언어로 번역 후 목적프로그램으로 실행/목적프로그램을 실행(java, c언어)
	* 인터프리터 언어: 개발과 동시에 번역이 이루어지며 실행(js) 번역 후 실행/목적프로그램을 만들지 않는다.
	* 컴파일 언어가 목적프로그램을 실행한는 것으로 번역 후 실행하는 인터프리터 언어보다는 속도면에서 유리하지만,
	  개발 변화에 대한 적응이점은 인터프리터 언어가 더 크다.
	* JDK(Java Development Kit)컴파일 도구 및 개발에 필요한 library, JRE(Java Runtime Environment)목적 프로그램을 실행시키기 위함/JVM
	* 목적프로그램(원시프로그램을 기계어로 번역해놓은것)은 실행중인것인가? No
	* 실행중 이라는 것은 주기억장치(메모리/RAM, read access memory)에 상주하고 있는 프로그램
	
	* 쓰레드는 목적프로그램의 코드를 실행시켜준다.
	* CPU : 명령어 실행(연산자, 메서드, ...)
	* RAM : 변수 저장
	* 프로그램이 큰 의미이고, 쓰레드는 프로그램을 쪼개서 실행시키는 것을 의미;
	* class load : 목적프로그램의 코드를 주기억장치로 가져온다.(한줄한줄 가져온다/";"이 한줄의 기준)
	* JVM : Java Virtual Machine
	* JVM의 구조 : Stack(메서드의 실행, call 에 따른 코드와 지역변수를 저장/FILO, First In Last Out)
				   Heap 은 클래스/인스턴스로 만든 객체를 생성, 사용, 소멸로 구성
				   Method 는 소스파일, 멤버변수, static(공용변수/객체를 만들지 않아도 접근이 가능) 을 저장
	* thread 는 Method 와 Heap 의 영역을 공유(변수 접근이 가능하다)하지만, stack 의 경우 독립적으로 가진다. 
	* 메모리 누수 : 사용하지 않는 객체가 차지하고 있는 메모리(자바의 경우 garbage collector 가 찾아서 삭제한다)